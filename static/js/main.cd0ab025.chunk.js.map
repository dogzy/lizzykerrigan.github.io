{"version":3,"sources":["images/portfolio.jpg","images/portfoliowebp.webp","components/Header.jsx","components/Photograph.jsx","components/Portfolio.jsx","components/Contact.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","id","Photograph","srcSet","portfoliowebp","type","alt","portfolio","src","Portfolio","Contact","href","target","rel","App","components_Header","components_Photograph","className","components_Portfolio","components_Contact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8LCezBC,eAbA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACNH,EAAAC,EAAAC,cAAA,MAAIC,GAAG,UAAP,sBACAH,EAAAC,EAAAC,cAAA,MAAIC,GAAG,cACJ,IADH,iICqBSC,EAvBI,SAAAL,GACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cACNH,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,UACEG,OAAQC,IACRC,KAAK,aACLC,IAAI,kDAENR,EAAAC,EAAAC,cAAA,UACEG,OAAQI,IACRF,KAAK,aACLC,IAAI,kDAENR,EAAAC,EAAAC,cAAA,OACEQ,IAAKD,IACLD,IAAI,qDCVCG,EARG,SAAAZ,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,qDCqBSU,EAxBC,SAAAb,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACNH,EAAAC,EAAAC,cAAA,wBACc,IACZF,EAAAC,EAAAC,cAAA,KACEW,KAAK,mCACLC,OAAO,SACPC,IAAI,YAHN,UAFF,IASGf,EAAAC,EAAAC,cAAA,WATH,KAUK,IACHF,EAAAC,EAAAC,cAAA,KAAGW,KAAK,gCAAgCC,OAAO,SAASC,IAAI,YAA5D,WAXF,IAcGf,EAAAC,EAAAC,cAAA,WAdH,uDCoBSc,MAlBf,WACE,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACNH,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGiB,UAAU,UAAb,OACAnB,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGiB,UAAU,UAAb,OACAnB,EAAAC,EAAAC,cAACmB,EAAD,SCPYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cd0ab025.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/portfolio.04b406ab.jpg\";","module.exports = __webpack_public_path__ + \"static/media/portfoliowebp.401f6ade.webp\";","import React, { Component } from \"react\";\n\nconst Header = props => {\n  return (\n    <div id=\"header\">\n      <h1 id=\"myname\">Elizabeth Kerrigan</h1>\n      <h1 id=\"describeme\">\n        {\" \"}\n        is a software developer and Northcoders student in Stockport, Greater\n        Manchester, England.\n      </h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport portfolio from \"../images/portfolio.jpg\";\nimport portfoliowebp from \"../images/portfoliowebp.webp\";\n\nconst Photograph = props => {\n  return (\n    <div id=\"photograph\">\n      <picture>\n        <source\n          srcSet={portfoliowebp}\n          type=\"image/webp\"\n          alt=\"photograph of a Manchester city centre street\"\n        />\n        <source\n          srcSet={portfolio}\n          type=\"image/jpeg\"\n          alt=\"photograph of a Manchester city centre street\"\n        />\n        <img\n          src={portfolio}\n          alt=\"photograph of a Manchester city centre street\"\n        />\n      </picture>\n    </div>\n  );\n};\n\nexport default Photograph;\n","import React, { Component } from \"react\";\n\nconst Portfolio = props => {\n  return (\n    <div id=\"portfolio\">\n      <h2>Selected works will be added shortly.</h2>\n    </div>\n  );\n};\n\nexport default Portfolio;\n","import React, { Component } from \"react\";\n\nconst Contact = props => {\n  return (\n    <div id=\"contact\">\n      <h2>\n        Find her on{\" \"}\n        <a\n          href=\"https://github.com/lizzykerrigan\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          GitHub\n        </a>\n        .<br />\n        Or{\" \"}\n        <a href=\"https://twitter.com/thelabize\" target=\"_blank\" rel=\"noopener\">\n          Twitter\n        </a>\n        .<br />\n        Or why not send an email? lizzykerrigan@gmail.com\n      </h2>\n    </div>\n  );\n};\n\nexport default Contact;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Photograph from \"./components/Photograph\";\nimport Portfolio from \"./components/Portfolio\";\nimport Contact from \"./components/Contact\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <div id=\"main\">\n        <Photograph />\n        <br />\n        <br />\n        <p className=\"dinkus\">***</p>\n        <Portfolio />\n        <br />\n        <p className=\"dinkus\">***</p>\n        <Contact />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}